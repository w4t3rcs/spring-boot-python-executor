package io.w4t3rcs.python.resolver;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.w4t3rcs.python.cache.CacheKeyGenerator;
import io.w4t3rcs.python.exception.PythonCacheException;
import io.w4t3rcs.python.properties.PythonCacheProperties;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * {@link PythonResolverHolder} implementation that adds caching functionality
 * for resolved Python scripts based on an input script and arguments.
 * <p>
 * This class delegates resolution to a wrapped {@link PythonResolverHolder} instance
 * and caches the resolved script results keyed by a generated cache key composed of
 * the original script and a sorted, serialized argument map.
 * </p>
 * <p>
 * Arguments are sorted by key and serialized using {@link ObjectMapper} to ensure
 * consistent cache key generation for equivalent argument maps.
 * </p>
 *
 * <p>Usage example:</p>
 * <pre>{@code
 * PythonResolverHolder baseHolder = ...;
 * CacheManager cacheManager = ...;
 * PythonCacheProperties cacheProperties = ...;
 * CacheKeyGenerator keyGenerator = ...;
 * ObjectMapper objectMapper = ...;
 *
 * PythonResolverHolder cachingHolder = new CachingPythonResolverHolder(cacheProperties, baseHolder, cacheManager, keyGenerator, objectMapper);
 *
 * String script = "print('Hello')";
 * String resolvedScript = cachingHolder.resolveAll(script);
 * }</pre>
 *
 * @see PythonResolverHolder
 * @see PythonCacheProperties.NameProperties
 * @see CacheKeyGenerator
 * @see PythonResolver
 * @author w4t3rcs
 * @since 1.0.0
 */
public class CachingPythonResolverHolder implements PythonResolverHolder {
    private final PythonResolverHolder pythonResolverHolder;
    private final Cache cache;
    private final CacheKeyGenerator keyGenerator;
    private final ObjectMapper objectMapper;

    /**
     * Constructs a new {@code CachingPythonResolverHolder}.
     *
     * @param cacheProperties non-null properties containing cache names
     * @param pythonResolverHolder non-null delegate {@link PythonResolverHolder}
     * @param cacheManager non-null {@link CacheManager} to obtain cache instance
     * @param keyGenerator non-null key generator for cache keys
     * @param objectMapper non-null {@link ObjectMapper} for JSON serialization
     */
    public CachingPythonResolverHolder(PythonCacheProperties cacheProperties, PythonResolverHolder pythonResolverHolder, CacheManager cacheManager, CacheKeyGenerator keyGenerator, ObjectMapper objectMapper) {
        this.pythonResolverHolder = pythonResolverHolder;
        this.cache = cacheManager.getCache(cacheProperties.name().resolver());
        this.keyGenerator = keyGenerator;
        this.objectMapper = objectMapper;
    }

    /**
     * Resolves all variables in the given script using provided arguments,
     * caching the resolved script result.
     * <p>
     * The cache key is generated by concatenating the original script and the JSON
     * serialization of the sorted arguments map, ensuring consistent keys for
     * logically equivalent argument sets.
     * </p>
     *
     * @param script non-null script to resolve variables in
     * @param arguments non-null map of arguments for resolution
     * @return resolved script string, never null
     * @throws PythonCacheException if any error occurs during caching or resolution
     */
    @Override
    public String resolveAll(String script, Map<String, Object> arguments) {
        try {
            Map<String, Object> sortedMap = new TreeMap<>(arguments);
            String argumentsJson = objectMapper.writeValueAsString(sortedMap);
            String body = script + argumentsJson;
            String key = keyGenerator.generateKey(body);
            String cachedResolvedScript = cache.get(key, String.class);
            if (cachedResolvedScript != null) {
                return cachedResolvedScript;
            } else {
                String resolvedScript = pythonResolverHolder.resolveAll(script, arguments);
                cache.put(key, resolvedScript);
                return resolvedScript;
            }
        } catch (Exception e) {
            throw new PythonCacheException(e);
        }
    }

    /**
     * Returns the list of resolvers used by this holder.
     * <p>
     * This method delegates directly to the underlying {@link PythonResolverHolder} instance.
     * The returned list may be mutable or immutable depending on the implementation.
     * </p>
     *
     * @return list of {@link PythonResolver} instances, never null
     */
    @Override
    public List<PythonResolver> getResolvers() {
        return pythonResolverHolder.getResolvers();
    }
}